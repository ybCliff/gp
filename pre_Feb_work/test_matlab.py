import matlab.engine
import time
import numpy as np
import cv2

def write_matrix(path, filename, matrix):
    f = open(path + filename, 'w')
    assert len(matrix.shape) == 2
    m, _ = matrix.shape
    content = ""
    for i in range(m):
        tmp = matrix[i, :]
        print(len(tmp))
        content += ','.join(str(k) for k in tmp)
        content += '\n'
    f.write(content)
    f.close()

def process_to_gray(matrix):
    matrix = matrix.astype(np.float32)
    matrix = np.multiply(matrix, 255.0)
    return matrix

def process_to_rgb(matrix):
    m, n = matrix.shape
    rgb = np.zeros((m, n, 3))
    for i in range(m):
        for j in range(n):
            rgb[i][j][0] = matrix[i][j]
    rgb[:][:][1] = rgb[:][:][0]
    rgb[:][:][2] = rgb[:][:][0]
    return rgb

eng = matlab.engine.start_matlab()
img_width = 320.0
img_heigh = 240.0
joints_root_path = "D:/graduation_project/workspace/dataset/HMDB51_train_test_splits/train1_joints/ori/"
ori_path = joints_root_path
x_path = joints_root_path + 'x/'
y_path = joints_root_path + 'y/'
joints_keys = 18

filename = "3062_44.txt"
pre, post = filename.split('.')

file_to_read = open(ori_path + filename, 'r')

record = file_to_read.readline()
statistics = file_to_read.readline()
length = len(statistics.split(' '))
x_matrix = np.zeros((length, joints_keys))
y_matrix = np.zeros((length, joints_keys))

content = file_to_read.read()
file_to_read.close()
content = content.split("\n")
assert length == len(content)

for i in range(length):
    col = content[i].split(' ')
    col.pop()
    print(col)
    for j in range(len(col)):
        detail = col[j].split(':')          # 'key' 'x,y'
        coor = detail[1].split(',')         # 'x' 'y'
        x_matrix[i][int(detail[0])] = float(coor[0]) / img_width
        y_matrix[i][int(detail[0])] = float(coor[1]) / img_heigh

print(length, x_matrix.shape)

[U, V, itr] = eng.inexact_alm_mc(x_matrix.tolist(), length, joints_keys, nargout=3)
U = np.array(U)
V = np.array(V)
np.set_printoptions(suppress=True)
D = U * V
# print(D[0:10, :])
# print(x_matrix[0:10, :])
# print(D - x_matrix)
# print(U.shape, V.shape)

# write_matrix(x_path, filename, x_matrix)
# write_matrix(x_path, pre + '_mc.txt', D)
jetMap = np.array([[0.0, 0.0, 0.51563], [0.0, 0.0, 0.53125], [0.0, 0.0, 0.54688], [0.0, 0.0, 0.5625], [0.0, 0.0, 0.57813], [0.0, 0.0, 0.59375], [0.0, 0.0, 0.60938], [0.0, 0.0, 0.625], [0.0, 0.0, 0.64063], [0.0, 0.0, 0.65625], [0.0, 0.0, 0.67188], [0.0, 0.0, 0.6875], [0.0, 0.0, 0.70313], [0.0, 0.0, 0.71875], [0.0, 0.0, 0.73438], [0.0, 0.0, 0.75], [0.0, 0.0, 0.76563], [0.0, 0.0, 0.78125], [0.0, 0.0, 0.79688], [0.0, 0.0, 0.8125], [0.0, 0.0, 0.82813], [0.0, 0.0, 0.84375], [0.0, 0.0, 0.85938], [0.0, 0.0, 0.875], [0.0, 0.0, 0.89063], [0.0, 0.0, 0.90625], [0.0, 0.0, 0.92188], [0.0, 0.0, 0.9375], [0.0, 0.0, 0.95313], [0.0, 0.0, 0.96875], [0.0, 0.0, 0.98438], [0.0, 0.0, 1.0], [0.0, 0.015625, 1.0], [0.0, 0.03125, 1.0], [0.0, 0.046875, 1.0], [0.0, 0.0625, 1.0], [0.0, 0.078125, 1.0], [0.0, 0.09375, 1.0], [0.0, 0.10938, 1.0], [0.0, 0.125, 1.0], [0.0, 0.14063, 1.0], [0.0, 0.15625, 1.0], [0.0, 0.17188, 1.0], [0.0, 0.1875, 1.0], [0.0, 0.20313, 1.0], [0.0, 0.21875, 1.0], [0.0, 0.23438, 1.0], [0.0, 0.25, 1.0], [0.0, 0.26563, 1.0], [0.0, 0.28125, 1.0], [0.0, 0.29688, 1.0], [0.0, 0.3125, 1.0], [0.0, 0.32813, 1.0], [0.0, 0.34375, 1.0], [0.0, 0.35938, 1.0], [0.0, 0.375, 1.0], [0.0, 0.39063, 1.0], [0.0, 0.40625, 1.0], [0.0, 0.42188, 1.0], [0.0, 0.4375, 1.0], [0.0, 0.45313, 1.0], [0.0, 0.46875, 1.0], [0.0, 0.48438, 1.0], [0.0, 0.5, 1.0], [0.0, 0.51563, 1.0], [0.0, 0.53125, 1.0], [0.0, 0.54688, 1.0], [0.0, 0.5625, 1.0], [0.0, 0.57813, 1.0], [0.0, 0.59375, 1.0], [0.0, 0.60938, 1.0], [0.0, 0.625, 1.0], [0.0, 0.64063, 1.0], [0.0, 0.65625, 1.0], [0.0, 0.67188, 1.0], [0.0, 0.6875, 1.0], [0.0, 0.70313, 1.0], [0.0, 0.71875, 1.0], [0.0, 0.73438, 1.0], [0.0, 0.75, 1.0], [0.0, 0.76563, 1.0], [0.0, 0.78125, 1.0], [0.0, 0.79688, 1.0], [0.0, 0.8125, 1.0], [0.0, 0.82813, 1.0], [0.0, 0.84375, 1.0], [0.0, 0.85938, 1.0], [0.0, 0.875, 1.0], [0.0, 0.89063, 1.0], [0.0, 0.90625, 1.0], [0.0, 0.92188, 1.0], [0.0, 0.9375, 1.0], [0.0, 0.95313, 1.0], [0.0, 0.96875, 1.0], [0.0, 0.98438, 1.0], [0.0, 1.0, 1.0], [0.015625, 1.0, 0.98438], [0.03125, 1.0, 0.96875], [0.046875, 1.0, 0.95313], [0.0625, 1.0, 0.9375], [0.078125, 1.0, 0.92188], [0.09375, 1.0, 0.90625], [0.10938, 1.0, 0.89063], [0.125, 1.0, 0.875], [0.14063, 1.0, 0.85938], [0.15625, 1.0, 0.84375], [0.17188, 1.0, 0.82813], [0.1875, 1.0, 0.8125], [0.20313, 1.0, 0.79688], [0.21875, 1.0, 0.78125], [0.23438, 1.0, 0.76563], [0.25, 1.0, 0.75], [0.26563, 1.0, 0.73438], [0.28125, 1.0, 0.71875], [0.29688, 1.0, 0.70313], [0.3125, 1.0, 0.6875], [0.32813, 1.0, 0.67188], [0.34375, 1.0, 0.65625], [0.35938, 1.0, 0.64063], [0.375, 1.0, 0.625], [0.39063, 1.0, 0.60938], [0.40625, 1.0, 0.59375], [0.42188, 1.0, 0.57813], [0.4375, 1.0, 0.5625], [0.45313, 1.0, 0.54688], [0.46875, 1.0, 0.53125], [0.48438, 1.0, 0.51563], [0.5, 1.0, 0.5], [0.51563, 1.0, 0.48438], [0.53125, 1.0, 0.46875], [0.54688, 1.0, 0.45313], [0.5625, 1.0, 0.4375], [0.57813, 1.0, 0.42188], [0.59375, 1.0, 0.40625], [0.60938, 1.0, 0.39063], [0.625, 1.0, 0.375], [0.64063, 1.0, 0.35938], [0.65625, 1.0, 0.34375], [0.67188, 1.0, 0.32813], [0.6875, 1.0, 0.3125], [0.70313, 1.0, 0.29688], [0.71875, 1.0, 0.28125], [0.73438, 1.0, 0.26563], [0.75, 1.0, 0.25], [0.76563, 1.0, 0.23438], [0.78125, 1.0, 0.21875], [0.79688, 1.0, 0.20313], [0.8125, 1.0, 0.1875], [0.82813, 1.0, 0.17188], [0.84375, 1.0, 0.15625], [0.85938, 1.0, 0.14063], [0.875, 1.0, 0.125], [0.89063, 1.0, 0.10938], [0.90625, 1.0, 0.09375], [0.92188, 1.0, 0.078125], [0.9375, 1.0, 0.0625], [0.95313, 1.0, 0.046875], [0.96875, 1.0, 0.03125], [0.98438, 1.0, 0.015625], [1.0, 1.0, 0.0], [1.0, 0.98438, 0.0], [1.0, 0.96875, 0.0], [1.0, 0.95313, 0.0], [1.0, 0.9375, 0.0], [1.0, 0.92188, 0.0], [1.0, 0.90625, 0.0], [1.0, 0.89063, 0.0], [1.0, 0.875, 0.0], [1.0, 0.85938, 0.0], [1.0, 0.84375, 0.0], [1.0, 0.82813, 0.0], [1.0, 0.8125, 0.0], [1.0, 0.79688, 0.0], [1.0, 0.78125, 0.0], [1.0, 0.76563, 0.0], [1.0, 0.75, 0.0], [1.0, 0.73438, 0.0], [1.0, 0.71875, 0.0], [1.0, 0.70313, 0.0], [1.0, 0.6875, 0.0], [1.0, 0.67188, 0.0], [1.0, 0.65625, 0.0], [1.0, 0.64063, 0.0], [1.0, 0.625, 0.0], [1.0, 0.60938, 0.0], [1.0, 0.59375, 0.0], [1.0, 0.57813, 0.0], [1.0, 0.5625, 0.0], [1.0, 0.54688, 0.0], [1.0, 0.53125, 0.0], [1.0, 0.51563, 0.0], [1.0, 0.5, 0.0], [1.0, 0.48438, 0.0], [1.0, 0.46875, 0.0], [1.0, 0.45313, 0.0], [1.0, 0.4375, 0.0], [1.0, 0.42188, 0.0], [1.0, 0.40625, 0.0], [1.0, 0.39063, 0.0], [1.0, 0.375, 0.0], [1.0, 0.35938, 0.0], [1.0, 0.34375, 0.0], [1.0, 0.32813, 0.0], [1.0, 0.3125, 0.0], [1.0, 0.29688, 0.0], [1.0, 0.28125, 0.0], [1.0, 0.26563, 0.0], [1.0, 0.25, 0.0], [1.0, 0.23438, 0.0], [1.0, 0.21875, 0.0], [1.0, 0.20313, 0.0], [1.0, 0.1875, 0.0], [1.0, 0.17188, 0.0], [1.0, 0.15625, 0.0], [1.0, 0.14063, 0.0], [1.0, 0.125, 0.0], [1.0, 0.10938, 0.0], [1.0, 0.09375, 0.0], [1.0, 0.078125, 0.0], [1.0, 0.0625, 0.0], [1.0, 0.046875, 0.0], [1.0, 0.03125, 0.0], [1.0, 0.015625, 0.0], [1.0, 0.0, 0.0], [0.98438, 0.0, 0.0], [0.96875, 0.0, 0.0], [0.95313, 0.0, 0.0], [0.9375, 0.0, 0.0], [0.92188, 0.0, 0.0], [0.90625, 0.0, 0.0], [0.89063, 0.0, 0.0], [0.875, 0.0, 0.0], [0.85938, 0.0, 0.0], [0.84375, 0.0, 0.0], [0.82813, 0.0, 0.0], [0.8125, 0.0, 0.0], [0.79688, 0.0, 0.0], [0.78125, 0.0, 0.0], [0.76563, 0.0, 0.0], [0.75, 0.0, 0.0], [0.73438, 0.0, 0.0], [0.71875, 0.0, 0.0], [0.70313, 0.0, 0.0], [0.6875, 0.0, 0.0], [0.67188, 0.0, 0.0], [0.65625, 0.0, 0.0], [0.64063, 0.0, 0.0], [0.625, 0.0, 0.0], [0.60938, 0.0, 0.0], [0.59375, 0.0, 0.0], [0.57813, 0.0, 0.0], [0.5625, 0.0, 0.0], [0.54688, 0.0, 0.0], [0.53125, 0.0, 0.0], [0.51563, 0.0, 0.0], [0.5, 0.0, 0.0]])

def gray2jet(img):
    assert img.ndim == 2
    m, n = img.shape
    jet = np.zeros((m, n, 3))
    largest = np.max(img)
    img /= largest
    img *= 255
    print(largest)
    # print(img)
    for i in range(m):
        for j in range(n):

            val = int(round(img[i][j]))
            # print(i, j, img[i, j], val)
            jet[i][j][:] = jetMap[val][:]
    return jet

from matplotlib import pyplot as plt
import matplotlib.cm as cm
tmp1 = process_to_gray(x_matrix)
tmp2 = process_to_gray(D)
tmp3 = cv2.resize(tmp1, (224, 224))
tmp4 = cv2.resize(tmp2, (224, 224))
tmp5 = gray2jet(tmp3)
tmp6 = gray2jet(tmp4)
tmp7 = process_to_rgb(tmp3)
tmp8 = process_to_rgb(tmp4)
print(tmp2)
print(max(tmp2.tolist()))
print(min(tmp2.tolist()))

plt.figure()
plt.subplot(2, 4, 1)
plt.imshow(tmp1)
plt.subplot(2, 4, 2)
plt.imshow(tmp2)
plt.subplot(2, 4, 3)
plt.imshow(tmp3)
plt.subplot(2, 4, 4)
plt.imshow(tmp4)
plt.subplot(2, 4, 5)
plt.imshow(tmp5)
plt.subplot(2, 4, 6)
plt.imshow(tmp6)
plt.subplot(2, 4, 7)
plt.imshow(tmp7)
plt.subplot(2, 4, 8)
plt.imshow(tmp8)
plt.show()

# img = x_matrix
# plt.figure()
# plt.subplot(221); plt.imshow(img)
# plt.subplot(222); plt.imshow(img, cmap ='gray')
# plt.subplot(223); plt.imshow(img, cmap = plt.cm.gray)
# plt.subplot(224); plt.imshow(img, cmap = plt.cm.gray_r)
# plt.show()

tmp = np.zeros((length, joints_keys, 3))
for i in range(length):
    for j in range(joints_keys):
        tmp[i][j][0] = x_matrix[i][j]
tmp[:][:][1] = tmp[:][:][0]
tmp[:][:][2] = tmp[:][:][0]

# img = tmp
# plt.figure()
# plt.subplot(221); plt.imshow(img)
# plt.subplot(222); plt.imshow(img, cmap ='gray')
# plt.subplot(223); plt.imshow(img, cmap = plt.cm.gray)
# plt.subplot(224); plt.imshow(img, cmap = plt.cm.gray_r)
# plt.show()

# cv2.imshow('x_matrix_3', tmp)
# cv2.waitKey(0)
# cv2.imshow('x_matrix', x_matrix)
# cv2.waitKey(0)