import numpy as np
import os, cv2
import random, time
from matplotlib import pyplot as plt
root = "D:/graduation_project/workspace/dataset/HMDB51/"
avg_split_num = 15
loop_num = 10

jetMap = np.array([[0.0, 0.0, 0.51563], [0.0, 0.0, 0.53125], [0.0, 0.0, 0.54688], [0.0, 0.0, 0.5625], [0.0, 0.0, 0.57813], [0.0, 0.0, 0.59375], [0.0, 0.0, 0.60938], [0.0, 0.0, 0.625], [0.0, 0.0, 0.64063], [0.0, 0.0, 0.65625], [0.0, 0.0, 0.67188], [0.0, 0.0, 0.6875], [0.0, 0.0, 0.70313], [0.0, 0.0, 0.71875], [0.0, 0.0, 0.73438], [0.0, 0.0, 0.75], [0.0, 0.0, 0.76563], [0.0, 0.0, 0.78125], [0.0, 0.0, 0.79688], [0.0, 0.0, 0.8125], [0.0, 0.0, 0.82813], [0.0, 0.0, 0.84375], [0.0, 0.0, 0.85938], [0.0, 0.0, 0.875], [0.0, 0.0, 0.89063], [0.0, 0.0, 0.90625], [0.0, 0.0, 0.92188], [0.0, 0.0, 0.9375], [0.0, 0.0, 0.95313], [0.0, 0.0, 0.96875], [0.0, 0.0, 0.98438], [0.0, 0.0, 1.0], [0.0, 0.015625, 1.0], [0.0, 0.03125, 1.0], [0.0, 0.046875, 1.0], [0.0, 0.0625, 1.0], [0.0, 0.078125, 1.0], [0.0, 0.09375, 1.0], [0.0, 0.10938, 1.0], [0.0, 0.125, 1.0], [0.0, 0.14063, 1.0], [0.0, 0.15625, 1.0], [0.0, 0.17188, 1.0], [0.0, 0.1875, 1.0], [0.0, 0.20313, 1.0], [0.0, 0.21875, 1.0], [0.0, 0.23438, 1.0], [0.0, 0.25, 1.0], [0.0, 0.26563, 1.0], [0.0, 0.28125, 1.0], [0.0, 0.29688, 1.0], [0.0, 0.3125, 1.0], [0.0, 0.32813, 1.0], [0.0, 0.34375, 1.0], [0.0, 0.35938, 1.0], [0.0, 0.375, 1.0], [0.0, 0.39063, 1.0], [0.0, 0.40625, 1.0], [0.0, 0.42188, 1.0], [0.0, 0.4375, 1.0], [0.0, 0.45313, 1.0], [0.0, 0.46875, 1.0], [0.0, 0.48438, 1.0], [0.0, 0.5, 1.0], [0.0, 0.51563, 1.0], [0.0, 0.53125, 1.0], [0.0, 0.54688, 1.0], [0.0, 0.5625, 1.0], [0.0, 0.57813, 1.0], [0.0, 0.59375, 1.0], [0.0, 0.60938, 1.0], [0.0, 0.625, 1.0], [0.0, 0.64063, 1.0], [0.0, 0.65625, 1.0], [0.0, 0.67188, 1.0], [0.0, 0.6875, 1.0], [0.0, 0.70313, 1.0], [0.0, 0.71875, 1.0], [0.0, 0.73438, 1.0], [0.0, 0.75, 1.0], [0.0, 0.76563, 1.0], [0.0, 0.78125, 1.0], [0.0, 0.79688, 1.0], [0.0, 0.8125, 1.0], [0.0, 0.82813, 1.0], [0.0, 0.84375, 1.0], [0.0, 0.85938, 1.0], [0.0, 0.875, 1.0], [0.0, 0.89063, 1.0], [0.0, 0.90625, 1.0], [0.0, 0.92188, 1.0], [0.0, 0.9375, 1.0], [0.0, 0.95313, 1.0], [0.0, 0.96875, 1.0], [0.0, 0.98438, 1.0], [0.0, 1.0, 1.0], [0.015625, 1.0, 0.98438], [0.03125, 1.0, 0.96875], [0.046875, 1.0, 0.95313], [0.0625, 1.0, 0.9375], [0.078125, 1.0, 0.92188], [0.09375, 1.0, 0.90625], [0.10938, 1.0, 0.89063], [0.125, 1.0, 0.875], [0.14063, 1.0, 0.85938], [0.15625, 1.0, 0.84375], [0.17188, 1.0, 0.82813], [0.1875, 1.0, 0.8125], [0.20313, 1.0, 0.79688], [0.21875, 1.0, 0.78125], [0.23438, 1.0, 0.76563], [0.25, 1.0, 0.75], [0.26563, 1.0, 0.73438], [0.28125, 1.0, 0.71875], [0.29688, 1.0, 0.70313], [0.3125, 1.0, 0.6875], [0.32813, 1.0, 0.67188], [0.34375, 1.0, 0.65625], [0.35938, 1.0, 0.64063], [0.375, 1.0, 0.625], [0.39063, 1.0, 0.60938], [0.40625, 1.0, 0.59375], [0.42188, 1.0, 0.57813], [0.4375, 1.0, 0.5625], [0.45313, 1.0, 0.54688], [0.46875, 1.0, 0.53125], [0.48438, 1.0, 0.51563], [0.5, 1.0, 0.5], [0.51563, 1.0, 0.48438], [0.53125, 1.0, 0.46875], [0.54688, 1.0, 0.45313], [0.5625, 1.0, 0.4375], [0.57813, 1.0, 0.42188], [0.59375, 1.0, 0.40625], [0.60938, 1.0, 0.39063], [0.625, 1.0, 0.375], [0.64063, 1.0, 0.35938], [0.65625, 1.0, 0.34375], [0.67188, 1.0, 0.32813], [0.6875, 1.0, 0.3125], [0.70313, 1.0, 0.29688], [0.71875, 1.0, 0.28125], [0.73438, 1.0, 0.26563], [0.75, 1.0, 0.25], [0.76563, 1.0, 0.23438], [0.78125, 1.0, 0.21875], [0.79688, 1.0, 0.20313], [0.8125, 1.0, 0.1875], [0.82813, 1.0, 0.17188], [0.84375, 1.0, 0.15625], [0.85938, 1.0, 0.14063], [0.875, 1.0, 0.125], [0.89063, 1.0, 0.10938], [0.90625, 1.0, 0.09375], [0.92188, 1.0, 0.078125], [0.9375, 1.0, 0.0625], [0.95313, 1.0, 0.046875], [0.96875, 1.0, 0.03125], [0.98438, 1.0, 0.015625], [1.0, 1.0, 0.0], [1.0, 0.98438, 0.0], [1.0, 0.96875, 0.0], [1.0, 0.95313, 0.0], [1.0, 0.9375, 0.0], [1.0, 0.92188, 0.0], [1.0, 0.90625, 0.0], [1.0, 0.89063, 0.0], [1.0, 0.875, 0.0], [1.0, 0.85938, 0.0], [1.0, 0.84375, 0.0], [1.0, 0.82813, 0.0], [1.0, 0.8125, 0.0], [1.0, 0.79688, 0.0], [1.0, 0.78125, 0.0], [1.0, 0.76563, 0.0], [1.0, 0.75, 0.0], [1.0, 0.73438, 0.0], [1.0, 0.71875, 0.0], [1.0, 0.70313, 0.0], [1.0, 0.6875, 0.0], [1.0, 0.67188, 0.0], [1.0, 0.65625, 0.0], [1.0, 0.64063, 0.0], [1.0, 0.625, 0.0], [1.0, 0.60938, 0.0], [1.0, 0.59375, 0.0], [1.0, 0.57813, 0.0], [1.0, 0.5625, 0.0], [1.0, 0.54688, 0.0], [1.0, 0.53125, 0.0], [1.0, 0.51563, 0.0], [1.0, 0.5, 0.0], [1.0, 0.48438, 0.0], [1.0, 0.46875, 0.0], [1.0, 0.45313, 0.0], [1.0, 0.4375, 0.0], [1.0, 0.42188, 0.0], [1.0, 0.40625, 0.0], [1.0, 0.39063, 0.0], [1.0, 0.375, 0.0], [1.0, 0.35938, 0.0], [1.0, 0.34375, 0.0], [1.0, 0.32813, 0.0], [1.0, 0.3125, 0.0], [1.0, 0.29688, 0.0], [1.0, 0.28125, 0.0], [1.0, 0.26563, 0.0], [1.0, 0.25, 0.0], [1.0, 0.23438, 0.0], [1.0, 0.21875, 0.0], [1.0, 0.20313, 0.0], [1.0, 0.1875, 0.0], [1.0, 0.17188, 0.0], [1.0, 0.15625, 0.0], [1.0, 0.14063, 0.0], [1.0, 0.125, 0.0], [1.0, 0.10938, 0.0], [1.0, 0.09375, 0.0], [1.0, 0.078125, 0.0], [1.0, 0.0625, 0.0], [1.0, 0.046875, 0.0], [1.0, 0.03125, 0.0], [1.0, 0.015625, 0.0], [1.0, 0.0, 0.0], [0.98438, 0.0, 0.0], [0.96875, 0.0, 0.0], [0.95313, 0.0, 0.0], [0.9375, 0.0, 0.0], [0.92188, 0.0, 0.0], [0.90625, 0.0, 0.0], [0.89063, 0.0, 0.0], [0.875, 0.0, 0.0], [0.85938, 0.0, 0.0], [0.84375, 0.0, 0.0], [0.82813, 0.0, 0.0], [0.8125, 0.0, 0.0], [0.79688, 0.0, 0.0], [0.78125, 0.0, 0.0], [0.76563, 0.0, 0.0], [0.75, 0.0, 0.0], [0.73438, 0.0, 0.0], [0.71875, 0.0, 0.0], [0.70313, 0.0, 0.0], [0.6875, 0.0, 0.0], [0.67188, 0.0, 0.0], [0.65625, 0.0, 0.0], [0.64063, 0.0, 0.0], [0.625, 0.0, 0.0], [0.60938, 0.0, 0.0], [0.59375, 0.0, 0.0], [0.57813, 0.0, 0.0], [0.5625, 0.0, 0.0], [0.54688, 0.0, 0.0], [0.53125, 0.0, 0.0], [0.51563, 0.0, 0.0], [0.5, 0.0, 0.0]])
jetMap *= 255
jetMap = jetMap.astype(np.int64)

def load_data(fn, joints_keys=18):
    file = open(fn, 'r')
    content = file.read()
    content = content.split('\n')
    tlen = len(content)
    if tlen == 1:
        content = [float(i) for i in content[0].split(',')]
        return np.reshape(np.array(content), (len(content) // joints_keys, joints_keys))
    else:
        while(content[len(content)-1] == ""):
            content.pop()
        for i in range(len(content)):
            content[i] = [float(k) for k in content[i].split(',')]
        return np.array(content)

def not_zero(a, b):
    return True if (a!=0 and b!=0) else False

def cal_distance(x, y, joints_keys=18):
    res = []
    for i in range(joints_keys):
        for j in range(i+1, joints_keys):
            if not_zero(x[i], y[i]) and not_zero(x[j], y[j]):
                res.append(((x[i]-x[j])**2 + (y[i]-y[j])**2)**0.5)
            else:
                res.append(0.0)
    return res

def draw(x, y, avg, joints_keys=18):
    num = int(joints_keys * (joints_keys - 1) / 2)
    canvas = np.zeros((avg, num))
    jet = np.zeros((avg, num, 3))

    for i in range(avg):
        canvas[i] = cal_distance(x[i], y[i])

    if np.max(canvas) != 0:
        canvas /= np.max(canvas)
        canvas *= 255

    for i in range(avg):
        for j in range(num):
            val = int(round(canvas[i, j]))
            jet[i, j] = jetMap[255 - val]

    return cv2.resize(jet, (224, 224))

def display(x, y, id, type, JDM_path):
    w = x.shape[0]
    arr = np.array([i for i in range(w)])
    avg_split_num=w
    split = np.array_split(arr, avg_split_num)
    for k in range(loop_num):
        lst = []
        for i in range(avg_split_num):
            lst.append(random.sample(split[i].tolist(), 1)[0])

        img = draw(x[lst], y[lst], avg=avg_split_num)
        img_name = id + '_' + str(k) + '_' + type + '.jpg'
        # print(img_name)
        cv2.imwrite(JDM_path+img_name,img)


def run(scope, jud_ori):
    if jud_ori:
        x_path = root + scope + '/ori_x/'
        y_path = root + scope + '/ori_y/'
        JDM_path = root + scope + '/JDM_ori/' + str(loop_num) + '_all/'
    else:
        x_path = root + scope + '/ori_x_mc/'
        y_path = root + scope + '/ori_y_mc/'
        JDM_path = root + scope + '/JDM_mc/' + str(loop_num) + '_all/'
    if not os.path.exists(JDM_path):
        os.makedirs(JDM_path)
    filelist = os.listdir(x_path)
    count = 0
    beginTime = time.time()
    for fn in filelist:
        count += 1
        if count % 50 == 0:
            print(count, time.time() - beginTime)
        tmp = fn.split('.')[0].split('_')
        x = load_data(x_path + fn)
        y = load_data(y_path + fn)
        display(x, y, tmp[0], tmp[1], JDM_path)

if __name__ == '__main__':
    run("train1", True)
    run("train1", False)
    run("test1", True)
    run("test1", False)

    # run("train3", True)
    # run("train3", False)
    # run("test3", True)
    # run("test3", False)